From c65fd73d6d9660d30bb99644780c9d79f48375b7 Mon Sep 17 00:00:00 2001
From: Christian Dreher <cdreher@prophesee.ai>
Date: Thu, 6 Feb 2025 17:40:43 +0100
Subject: [PATCH 11/17] Use the selection API to get the sensor Geometry

We have to describe the CSI-2 framing on media-ctl, to get the receiver
to behave properly, with non-pixel data, this framing is unrelated to
the actual sensor geometry. We need the actual geometry to allocate the
right amount of memory in the software processing pipeline,
the crop information bounds the possible (x,y) in the stream, which is
what we need.
---
 .../v4l2/v4l2_hardware_identification.cpp     | 24 ++++++++++++-------
 1 file changed, 16 insertions(+), 8 deletions(-)

diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
index 81e3501106..b9a8aebf15 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
@@ -39,34 +39,42 @@ std::string V4l2HwIdentification::get_current_data_encoding_format() const {
     struct v4l2_format fmt {
         .type = V4L2_BUF_TYPE_VIDEO_CAPTURE
     };
+    struct v4l2_subdev_selection crop_bound {
+        .which = V4L2_SUBDEV_FORMAT_ACTIVE,
+        .pad = 0,
+        .target = V4L2_SEL_TGT_CROP_BOUNDS,
+    };
 
     if (ioctl(ctrl_->get_video_entity()->fd, VIDIOC_G_FMT, &fmt))
         raise_error("VIDIOC_G_FMT failed");
 
+    if (ioctl(ctrl_->get_sensor_entity()->fd, VIDIOC_SUBDEV_G_SELECTION, &crop_bound))
+        raise_error("VIDIOC_SUBDEV_G_SELECTION failed");
+
     switch (fmt.fmt.pix.pixelformat) {
     case v4l2_fourcc('P', 'S', 'E', 'E'): {
         StreamFormat format("EVT2");
-        format["width"]                    = std::to_string(fmt.fmt.pix.width);
-        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        format["width"]                    = std::to_string(crop_bound.r.width);
+        format["height"]                   = std::to_string(crop_bound.r.height);
         return format.to_string();
     }
     case v4l2_fourcc('P', 'S', 'E', '1'): {
         StreamFormat format("EVT21");
         format["endianness"]               = "legacy";
-        format["width"]                    = std::to_string(fmt.fmt.pix.width);
-        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        format["width"]                    = std::to_string(crop_bound.r.width);
+        format["height"]                   = std::to_string(crop_bound.r.height);
         return format.to_string();
     }
     case v4l2_fourcc('P', 'S', 'E', '2'): {
         StreamFormat format("EVT21");
-        format["width"]                    = std::to_string(fmt.fmt.pix.width);
-        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        format["width"]                    = std::to_string(crop_bound.r.width);
+        format["height"]                   = std::to_string(crop_bound.r.height);
         return format.to_string();
     }
     case v4l2_fourcc('P', 'S', 'E', '3'): {
         StreamFormat format("EVT3");
-        format["width"]                    = std::to_string(fmt.fmt.pix.width);
-        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        format["width"]                    = std::to_string(crop_bound.r.width);
+        format["height"]                   = std::to_string(crop_bound.r.height);
         return format.to_string();
     }
     default:
-- 
2.39.5

