From 57e6cdf25fbab525bf02804d79c5f5040e099166 Mon Sep 17 00:00:00 2001
From: Ayman Khamouma <akhamouma@prophesee.ai>
Date: Wed, 2 Oct 2024 17:10:47 +0200
Subject: [PATCH 04/17] V4L2: Update the V4L2 device builder to instantiate
 v4l2 facilities

Signed-off-by: Ayman Khamouma <akhamouma@prophesee.ai>
---
 .../v4l2/v4l2_hardware_identification.h       |   7 +-
 .../v4l2/v4l2_hardware_identification.cpp     |  71 +++++-
 .../src/devices/v4l2/v4l2_device_builder.cpp  | 218 ++----------------
 3 files changed, 85 insertions(+), 211 deletions(-)

diff --git a/hal_psee_plugins/include/boards/v4l2/v4l2_hardware_identification.h b/hal_psee_plugins/include/boards/v4l2/v4l2_hardware_identification.h
index 6d795eee96..4f6b3fbda7 100644
--- a/hal_psee_plugins/include/boards/v4l2/v4l2_hardware_identification.h
+++ b/hal_psee_plugins/include/boards/v4l2/v4l2_hardware_identification.h
@@ -1,5 +1,5 @@
 #include "metavision/hal/facilities/i_hw_identification.h"
-#include "devices/common/sensor_descriptor.h"
+#include "boards/v4l2/v4l2_device.h"
 
 #include <linux/videodev2.h>
 
@@ -7,10 +7,10 @@ namespace Metavision {
 using V4l2Capability     = struct v4l2_capability;
 
 class V4l2HwIdentification : public I_HW_Identification {
-    V4l2Capability cap_;
+    std::shared_ptr<V4L2DeviceControl> ctrl_;
 
 public:
-    V4l2HwIdentification(const V4l2Capability cap, const std::shared_ptr<I_PluginSoftwareInfo> &plugin_sw_info, const SensorDescriptor &sensor_descriptor);
+    V4l2HwIdentification(std::shared_ptr<V4L2DeviceControl> ctrl, const std::shared_ptr<I_PluginSoftwareInfo> &plugin_sw_info);
 
     virtual SensorInfo get_sensor_info() const override;
     virtual std::vector<std::string> get_available_data_encoding_formats() const override;
@@ -21,6 +21,5 @@ public:
 
 protected:
     virtual DeviceConfigOptionMap get_device_config_options_impl() const override;
-    const SensorDescriptor &sensor_descriptor_;
 };
 }
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
index d5228078ce..81e3501106 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
@@ -1,17 +1,29 @@
 #include "boards/v4l2/v4l2_hardware_identification.h"
 #include "metavision/hal/facilities/i_plugin_software_info.h"
+#include "boards/v4l2/v4l2_device.h"
+#include "metavision/psee_hw_layer/utils/psee_format.h"
+#include <fcntl.h>
 
 namespace Metavision {
 
-V4l2HwIdentification::V4l2HwIdentification(const V4l2Capability cap,
-                                           const std::shared_ptr<I_PluginSoftwareInfo> &plugin_sw_info,
-                                           const SensorDescriptor &sensor_descriptor) :
-    I_HW_Identification(plugin_sw_info), cap_(cap), sensor_descriptor_(sensor_descriptor) {}
+V4l2HwIdentification::V4l2HwIdentification(std::shared_ptr<V4L2DeviceControl> ctrl,
+                                           const std::shared_ptr<I_PluginSoftwareInfo> &plugin_sw_info) :
+    I_HW_Identification(plugin_sw_info), ctrl_(ctrl) {}
 
 I_HW_Identification::SensorInfo V4l2HwIdentification::get_sensor_info() const {
-    // @TODO Retrieve those info through V4L2
-    return sensor_descriptor_.info;
+    auto controls = ctrl_->get_controls();
+    auto sensor_ent = ctrl_->get_sensor_entity();
+    std::string ent_name = std::string(sensor_ent->desc.name);
+
+    if (ent_name.find("imx636") == 0) {
+        return {4, 2, "IMX636"};
+    } else if (ent_name.find("genx320") == 0) {
+        return {320, 0, "GenX320"};
+    } else {
+        raise_error("Unknown sensor");
+    }
 }
+
 std::vector<std::string> V4l2HwIdentification::get_available_data_encoding_formats() const {
     // @TODO Retrieve those info through V4L2
     auto format = get_current_data_encoding_format();
@@ -22,25 +34,62 @@ std::vector<std::string> V4l2HwIdentification::get_available_data_encoding_forma
     }
     return {};
 }
+
 std::string V4l2HwIdentification::get_current_data_encoding_format() const {
-    // @TODO Retrieve those info through V4L2
-    return sensor_descriptor_.encoding_format;
+    struct v4l2_format fmt {
+        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE
+    };
+
+    if (ioctl(ctrl_->get_video_entity()->fd, VIDIOC_G_FMT, &fmt))
+        raise_error("VIDIOC_G_FMT failed");
+
+    switch (fmt.fmt.pix.pixelformat) {
+    case v4l2_fourcc('P', 'S', 'E', 'E'): {
+        StreamFormat format("EVT2");
+        format["width"]                    = std::to_string(fmt.fmt.pix.width);
+        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        return format.to_string();
+    }
+    case v4l2_fourcc('P', 'S', 'E', '1'): {
+        StreamFormat format("EVT21");
+        format["endianness"]               = "legacy";
+        format["width"]                    = std::to_string(fmt.fmt.pix.width);
+        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        return format.to_string();
+    }
+    case v4l2_fourcc('P', 'S', 'E', '2'): {
+        StreamFormat format("EVT21");
+        format["width"]                    = std::to_string(fmt.fmt.pix.width);
+        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        return format.to_string();
+    }
+    case v4l2_fourcc('P', 'S', 'E', '3'): {
+        StreamFormat format("EVT3");
+        format["width"]                    = std::to_string(fmt.fmt.pix.width);
+        format["height"]                   = std::to_string(fmt.fmt.pix.height);
+        return format.to_string();
+    }
+    default:
+        throw std::runtime_error("Unsupported pixel format");
+    }
 }
+
 std::string V4l2HwIdentification::get_serial() const {
     std::stringstream ss;
-    ss << cap_.card;
+    ss << ctrl_->get_capability().card;
     return ss.str();
 }
 std::string V4l2HwIdentification::get_integrator() const {
     std::stringstream ss;
-    ss << cap_.driver;
+    ss << ctrl_->get_capability().driver;
     return ss.str();
 }
 std::string V4l2HwIdentification::get_connection_type() const {
     std::stringstream ss;
-    ss << cap_.bus_info;
+    ss << ctrl_->get_capability().bus_info;
     return ss.str();
 }
+
 DeviceConfigOptionMap V4l2HwIdentification::get_device_config_options_impl() const {
     return {};
 }
diff --git a/hal_psee_plugins/src/devices/v4l2/v4l2_device_builder.cpp b/hal_psee_plugins/src/devices/v4l2/v4l2_device_builder.cpp
index 553ad991ca..8cff27dd70 100644
--- a/hal_psee_plugins/src/devices/v4l2/v4l2_device_builder.cpp
+++ b/hal_psee_plugins/src/devices/v4l2/v4l2_device_builder.cpp
@@ -18,25 +18,9 @@
 #include "metavision/psee_hw_layer/facilities/psee_hw_register.h"
 #include "metavision/hal/utils/device_builder.h"
 
-#include "metavision/psee_hw_layer/devices/gen41/gen41_erc.h"
-#include "metavision/psee_hw_layer/devices/gen41/gen41_digital_event_mask.h"
-#include "metavision/psee_hw_layer/devices/gen41/gen41_digital_crop.h"
-#include "metavision/psee_hw_layer/devices/gen41/gen41_roi_command.h"
-#include "metavision/psee_hw_layer/devices/imx636/imx636_tz_trigger_event.h"
-#include "metavision/psee_hw_layer/devices/imx636/imx636_ll_biases.h"
-
-#include "metavision/psee_hw_layer/devices/genx320/genx320_tz_trigger_event.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_roi_driver.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_roi_interface.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_roi_pixel_mask_interface.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_ll_biases.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_erc.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_nfl_driver.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_nfl_interface.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_dem_interface.h"
-#include "metavision/psee_hw_layer/devices/genx320/genx320_digital_crop.h"
-#include "devices/genx320/register_maps/genx320es_registermap.h"
-#include "devices/imx636/register_maps/imx636_registermap.h"
+#include "metavision/psee_hw_layer/devices/v4l2/v4l2_ll_biases.h"
+#include "metavision/psee_hw_layer/devices/v4l2/v4l2_erc.h"
+#include "metavision/psee_hw_layer/devices/v4l2/v4l2_roi_interface.h"
 
 #include "geometries/hd_geometry.h"
 
@@ -48,195 +32,22 @@
 
 #include "devices/v4l2/v4l2_device_builder.h"
 #include "utils/make_decoder.h"
-#include "devices/common/sensor_descriptor.h"
 
 #include <sys/ioctl.h>
 #include <linux/videodev2.h>
+#include <linux/v4l2-controls.h>
+#include <fcntl.h>
 
 namespace Metavision {
 
-static bool match(std::shared_ptr<BoardCommand> cmd, std::vector<MatchPattern> match_list) {
-    for (auto match : match_list) {
-        if ((cmd->read_device_register(0, match.addr, 1)[0] & match.mask) != (match.value))
-            return false;
-    }
-    return true;
-}
-
-// TODO: these functions should be registered automatically to the builder,
-// each sensor description should provide a spawn facility function
-// -> define a sensor descriptor (a set of regmap + a facility function)
-//
-// example: GenX320SensorDescriptor desc(GenX320ESRegisterMap, Genx320ESRegisterMapSize, genx320_spawn_facilities);
-// this would register everyting to the builder. And should avoid including all sensors from here...
-//
-static void genx320_spawn_facilities(DeviceBuilder &device_builder, const DeviceConfig &device_config,
-                                     I_HW_Identification::SensorInfo sensor_info,
-                                     std::shared_ptr<RegisterMap> register_map) {
-    auto roi_driver = std::make_shared<GenX320RoiDriver>(320, 320, register_map, "", device_config);
-    auto nfl        = std::make_shared<GenX320NflDriver>(register_map);
-
-    device_builder.add_facility(std::make_unique<GenX320RoiInterface>(roi_driver));
-    device_builder.add_facility(std::make_unique<GenX320RoiPixelMaskInterface>(roi_driver));
-    device_builder.add_facility(std::make_unique<GenX320TzTriggerEvent>(register_map, ""));
-    device_builder.add_facility(std::make_unique<GenX320LLBiases>(register_map, device_config));
-    device_builder.add_facility(std::make_unique<AntiFlickerFilter>(register_map, sensor_info, ""));
-    device_builder.add_facility(std::make_unique<EventTrailFilter>(register_map, sensor_info, ""));
-    device_builder.add_facility(std::make_unique<GenX320Erc>(register_map));
-    device_builder.add_facility(std::make_unique<GenX320NflInterface>(nfl));
-    device_builder.add_facility(std::make_unique<GenX320DemInterface>(register_map, ""));
-    device_builder.add_facility(std::make_unique<GenX320DigitalCrop>(register_map, ""));
-    device_builder.add_facility(std::make_unique<V4l2Synchronization>());
-}
-
-static void imx636_spawn_facilities(DeviceBuilder &device_builder, const DeviceConfig &device_config,
-                                    I_HW_Identification::SensorInfo sensor_info,
-                                    std::shared_ptr<RegisterMap> register_map) {
-    device_builder.add_facility(std::make_unique<EventTrailFilter>(register_map, sensor_info, ""));
-    device_builder.add_facility(std::make_unique<AntiFlickerFilter>(register_map, sensor_info, ""));
-
-    auto erc = device_builder.add_facility(std::make_unique<Gen41Erc>(register_map, "erc/"));
-    erc->initialize();
-
-    auto geometry = HDGeometry();
-
-    auto hw_register = std::make_shared<PseeHWRegister>(register_map);
-    device_builder.add_facility(std::make_unique<Imx636_LL_Biases>(device_config, hw_register, ""));
-
-    device_builder.add_facility(
-        std::make_unique<Gen41ROICommand>(geometry.get_width(), geometry.get_height(), register_map, ""));
-
-    device_builder.add_facility(std::make_unique<Imx636TzTriggerEvent>(register_map, ""));
-
-    device_builder.add_facility(std::make_unique<Gen41DigitalEventMask>(register_map, "ro/digital_mask_pixel_"));
-
-    device_builder.add_facility(std::make_unique<Gen41DigitalCrop>(register_map, ""));
-    device_builder.add_facility(std::make_unique<V4l2Synchronization>());
-}
-
-static SensorDescriptor *get_sensor_descriptor(std::shared_ptr<BoardCommand> cmd, uint32_t chip_id) {
-    // TODO: automatically register regmaps and facilities methods (at regmap deefinition time)
-    static std::vector<SensorDescriptor> supported_sensors = {
-        {
-            GenX320ESRegisterMap,
-            GenX320ESRegisterMapSize,
-            genx320_spawn_facilities,
-            {
-                {.addr = 0x14, .value = 0x30501C01, .mask = 0xFFFFFFFF},
-            },
-            {320, 0, "GenX320"},
-            "EVT21;height=320;width=320",
-        },
-        {
-            GenX320ESRegisterMap,
-            GenX320ESRegisterMapSize,
-            genx320_spawn_facilities,
-            {
-                {.addr = 0x14, .value = 0xb0602003, .mask = 0xFFFFFFFF},
-            },
-            {320, 1, "GenX320MP"},
-            "EVT21;height=320;width=320",
-        },
-        {
-            Imx636RegisterMap,
-            Imx636RegisterMapSize,
-            imx636_spawn_facilities,
-            {{.addr = 0x14, .value = 0xA0401806, .mask = 0xFFFFFFFF},
-             {.addr = 0xF128, .value = 0b00, .mask = 0x00000003}},
-            {4, 2, "IMX636"},
-            "EVT3;height=720;width=1280",
-        },
-        {
-            Imx636RegisterMap,
-            Imx636RegisterMapSize,
-            imx636_spawn_facilities,
-            {
-                {.addr = 0x14, .value = 0xA0401806, .mask = 0xFFFFFFFF},
-                {.addr = 0xF128, .value = 0b10, .mask = 0x00000003},
-            },
-            {4, 2, "IMX646"},
-            "EVT3;height=720;width=1280",
-        },
-    };
-
-    auto it =
-        std::find_if(supported_sensors.begin(), supported_sensors.end(),
-                     [chip_id, cmd](const SensorDescriptor &config) { return match(cmd, config.opt_match_list); });
-
-    if (it != supported_sensors.end()) {
-        return &(*it);
-    } else {
-        return nullptr;
-    }
-}
-
 bool V4L2DeviceBuilder::build_device(std::shared_ptr<BoardCommand> cmd, DeviceBuilder &device_builder,
                                      const DeviceConfig &config) {
-    auto chip_id           = cmd->read_device_register(0, 0x14)[0];
-    auto sensor_descriptor = get_sensor_descriptor(cmd, chip_id);
-    if (sensor_descriptor == nullptr || !match(cmd, sensor_descriptor->opt_match_list)) {
-        return false;
-    }
-
-    auto regmap_data =
-        RegisterMap::RegmapData(1, std::make_tuple(sensor_descriptor->regmap, sensor_descriptor->size, "", 0));
-
-    auto register_map = std::make_shared<RegisterMap>(regmap_data);
-    register_map->set_read_cb([cmd](uint32_t address) { return cmd->read_device_register(0, address, 1)[0]; });
-    register_map->set_write_cb([cmd](uint32_t address, uint32_t v) { cmd->write_device_register(0, address, {v}); });
-
     auto v4l2cmd = std::dynamic_pointer_cast<V4L2BoardCommand>(cmd);
 
     auto ctrl = v4l2cmd->get_device_control();
-    {
-        // This plugin code does not set format yet, it shall be set before starting Metavision SDK, but several values
-        // are possible. Update sensor information accordingly.
-        struct v4l2_format fmt {
-            .type = V4L2_BUF_TYPE_VIDEO_CAPTURE
-        };
-
-        if (ioctl(ctrl->get_video_entity()->fd, VIDIOC_G_FMT, &fmt))
-            raise_error("VIDIOC_G_FMT failed");
-
-        switch (fmt.fmt.pix.pixelformat) {
-        case v4l2_fourcc('P', 'S', 'E', 'E'): {
-            StreamFormat format("EVT2");
-            format["width"]                    = std::to_string(fmt.fmt.pix.width);
-            format["height"]                   = std::to_string(fmt.fmt.pix.height);
-            sensor_descriptor->encoding_format = format.to_string();
-            break;
-        }
-        case v4l2_fourcc('P', 'S', 'E', '1'): {
-            StreamFormat format("EVT21");
-            format["endianness"]               = "legacy";
-            format["width"]                    = std::to_string(fmt.fmt.pix.width);
-            format["height"]                   = std::to_string(fmt.fmt.pix.height);
-            sensor_descriptor->encoding_format = format.to_string();
-            break;
-        }
-        case v4l2_fourcc('P', 'S', 'E', '2'): {
-            StreamFormat format("EVT21");
-            format["width"]                    = std::to_string(fmt.fmt.pix.width);
-            format["height"]                   = std::to_string(fmt.fmt.pix.height);
-            sensor_descriptor->encoding_format = format.to_string();
-            break;
-        }
-        case v4l2_fourcc('P', 'S', 'E', '3'): {
-            StreamFormat format("EVT3");
-            format["width"]                    = std::to_string(fmt.fmt.pix.width);
-            format["height"]                   = std::to_string(fmt.fmt.pix.height);
-            sensor_descriptor->encoding_format = format.to_string();
-            break;
-        }
-        default:
-            // Possibly hacky configuration to get things working. Assume default format
-            break;
-        }
-    }
-    auto cap           = ctrl->get_capability();
     auto software_info = device_builder.get_plugin_software_info();
     auto hw_identification =
-        device_builder.add_facility(std::make_unique<V4l2HwIdentification>(cap, software_info, *sensor_descriptor));
+        device_builder.add_facility(std::make_unique<V4l2HwIdentification>(ctrl, software_info));
 
     try {
         size_t raw_size_bytes = 0;
@@ -246,7 +57,22 @@ bool V4L2DeviceBuilder::build_device(std::shared_ptr<BoardCommand> cmd, DeviceBu
                                                                      hw_identification, decoder, ctrl));
     } catch (std::exception &e) { MV_HAL_LOG_WARNING() << "System can't stream:" << e.what(); }
 
-    sensor_descriptor->spawn_facilities(device_builder, config, hw_identification->get_sensor_info(), register_map);
+    auto controls = ctrl->get_controls();
+
+    if (controls->has("bias")) {
+        MV_HAL_LOG_TRACE() << "Found BIAS controls\n";
+        device_builder.add_facility(std::make_unique<V4L2LLBiases>(config, controls));
+    }
+
+    if (controls->has("erc")) {
+        MV_HAL_LOG_TRACE() << "Found ERC controls";
+        device_builder.add_facility(std::make_unique<V4L2Erc>(controls));
+    }
+
+    if (controls->has("roi")) {
+        MV_HAL_LOG_TRACE() << "Found ROI controls";
+        device_builder.add_facility(std::make_unique<V4L2RoiInterface>(controls));
+    }
 
     return true;
 }
-- 
2.39.5

