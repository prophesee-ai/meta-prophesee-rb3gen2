From 24612adddd8e3ee94513943662428bcb2f799d02 Mon Sep 17 00:00:00 2001
From: Ayman Khamouma <akhamouma@prophesee.ai>
Date: Fri, 18 Oct 2024 00:37:48 +0200
Subject: [PATCH 03/17] V4L2: Introducing ERC, BIAS and ROI V4L2 facilities

---
 .../psee_hw_layer/devices/v4l2/v4l2_erc.h     |  52 +++++++
 .../devices/v4l2/v4l2_ll_biases.h             |  65 +++++++++
 .../devices/v4l2/v4l2_roi_interface.h         |  83 +++++++++++
 .../src/devices/v4l2/CMakeLists.txt           |   3 +
 .../src/devices/v4l2/v4l2_erc.cpp             |  85 ++++++++++++
 .../src/devices/v4l2/v4l2_ll_biases.cpp       |  83 +++++++++++
 .../src/devices/v4l2/v4l2_roi_interface.cpp   | 129 ++++++++++++++++++
 7 files changed, 500 insertions(+)
 create mode 100644 hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_erc.h
 create mode 100644 hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_ll_biases.h
 create mode 100644 hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_roi_interface.h
 create mode 100644 hal_psee_plugins/src/devices/v4l2/v4l2_erc.cpp
 create mode 100644 hal_psee_plugins/src/devices/v4l2/v4l2_ll_biases.cpp
 create mode 100644 hal_psee_plugins/src/devices/v4l2/v4l2_roi_interface.cpp

diff --git a/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_erc.h b/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_erc.h
new file mode 100644
index 0000000000..e889e35c66
--- /dev/null
+++ b/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_erc.h
@@ -0,0 +1,52 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#ifndef METAVISION_HAL_V4L2_ERC_H
+#define METAVISION_HAL_V4L2_ERC_H
+
+#include <string>
+#include <map>
+
+#include "metavision/hal/facilities/i_erc_module.h"
+#include "metavision/psee_hw_layer/boards/v4l2/v4l2_controls.h"
+
+namespace Metavision {
+
+class RegisterMap;
+
+class V4L2Erc : public I_ErcModule {
+public:
+    V4L2Erc(std::shared_ptr<V4L2Controls> controls);
+
+    virtual bool enable(bool en) override;
+    virtual bool is_enabled() const override;
+    virtual uint32_t get_count_period() const override;
+    virtual bool set_cd_event_count(uint32_t count) override;
+    virtual uint32_t get_min_supported_cd_event_count() const override;
+    virtual uint32_t get_max_supported_cd_event_count() const override;
+    virtual uint32_t get_cd_event_count() const override;
+    virtual void erc_from_file(const std::string &) override;
+
+private:
+
+    std::shared_ptr<V4L2Controls> controls_;
+
+    bool wait_status();
+    bool dfifo_disable_bypass_dyn();
+    std::map<std::string, uint32_t> is_powered_up_dyn();
+    bool activate_dyn(const uint32_t &td_target_vx_cnt);
+    bool set_evt_rate_dyn(uint32_t ref_period, uint32_t td_target_vx_cnt, uint32_t adr_delayed,
+                          uint32_t dfifo_non_td_area);
+};
+
+} // namespace Metavision
+
+#endif // METAVISION_HAL_V4L2_ERC_H
diff --git a/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_ll_biases.h b/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_ll_biases.h
new file mode 100644
index 0000000000..61e949aae1
--- /dev/null
+++ b/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_ll_biases.h
@@ -0,0 +1,65 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#ifndef METAVISION_HAL_V4L2_LL_BIASES_H
+#define METAVISION_HAL_V4L2_LL_BIASES_H
+
+#include <string>
+#include <map>
+#include <vector>
+
+#include "metavision/hal/facilities/i_ll_biases.h"
+#include "metavision/psee_hw_layer/devices/common/bias_settings.h"
+#include "metavision/psee_hw_layer/boards/v4l2/v4l2_controls.h"
+
+namespace Metavision {
+
+class RegisterMap;
+class V4L2Controls;
+
+class V4L2LLBiases : public I_LL_Biases {
+public:
+    V4L2LLBiases(const DeviceConfig &device_config, std::shared_ptr<V4L2Controls> controls);
+
+    virtual std::map<std::string, int> get_all_biases() const override;
+
+protected:
+    class V4L2Bias : public LL_Bias_Info {
+    public:
+        V4L2Bias(std::string register_name, const uint8_t &default_val, const bias_settings &bias_conf,
+                    const std::string &description, const std::string &category);
+
+        ~V4L2Bias() = default;
+
+        const std::string &get_bias_name() const;
+        const uint32_t &get_bias_max_value() const;
+        void display_bias() const;
+
+    private:
+        std::string bias_name_;
+        uint8_t default_value_;
+    };
+
+    std::map<std::string, V4L2Bias> biases_map_;
+    std::shared_ptr<V4L2Controls> controls_;
+
+private:
+    virtual bool set_impl(const std::string &bias_name, int bias_value) override;
+    virtual int get_impl(const std::string &bias_name) const override;
+    virtual bool get_bias_info_impl(const std::string &bias_name, LL_Bias_Info &info) const override;
+
+    std::shared_ptr<RegisterMap> register_map_;
+    int fd_;
+};
+
+} // namespace Metavision
+
+#endif // METAVISION_HAL_V4L2_LL_BIASES_H
diff --git a/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_roi_interface.h b/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_roi_interface.h
new file mode 100644
index 0000000000..e4b9122b4f
--- /dev/null
+++ b/hal_psee_plugins/psee_hw_layer_headers/include/metavision/psee_hw_layer/devices/v4l2/v4l2_roi_interface.h
@@ -0,0 +1,83 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#ifndef METAVISION_HAL_V4L2_ROI_INTERFACE_H
+#define METAVISION_HAL_V4L2_ROI_INTERFACE_H
+
+#include "metavision/hal/facilities/i_roi.h"
+#include "metavision/psee_hw_layer/boards/v4l2/v4l2_controls.h"
+
+namespace Metavision {
+
+class V4L2RoiInterface : public I_ROI {
+public:
+    V4L2RoiInterface(std::shared_ptr<V4L2Controls> controls);
+
+    /// @brief Returns the default device width
+    ///
+    /// This values is obtained from the default Device passed in the constructor of the class.
+    int device_width() const;
+
+    /// @brief Returns the default device height
+    ///
+    /// This values is obtained from the default Device passed in the constructor of the class.
+    int device_height() const;
+
+    /// @brief Applies ROI
+    /// @param state If true, enables ROI. If false, disables it
+    /// @warning At least one ROI should have been set before calling this function
+    /// @return true on success
+    bool enable(bool state);
+
+    bool is_enabled() const;
+
+    /// @brief Sets the window mode
+    /// @param mode window mode to set (ROI or RONI)
+    /// @return true on success
+    bool set_mode(const Mode &mode);
+
+    I_ROI::Mode get_mode() const;
+
+    /// @brief Gets the maximum number of windows
+    /// @return the maximum number of windows that can be set via @ref set_windows
+    size_t get_max_supported_windows_count() const;
+
+    /// @brief Sets multiple ROIs from row and column binary maps
+    ///
+    /// The binary maps (std::vector<bool>) arguments must have the sensor's dimension
+    ///
+    /// @param cols Vector of boolean of size sensor's width representing the binary map of the columns to
+    /// enable
+    /// @param rows Vector of boolean of size sensor's height representing the binary map of the rows to
+    /// enable
+    /// @return true if input have the correct dimension and the ROI is set correctly, false otherwise
+    /// @warning For a pixel to be enabled, it must be enabled on both its row and column
+    bool set_lines(const std::vector<bool> &cols, const std::vector<bool> &rows);
+
+    std::vector<I_ROI::Window> get_windows() const;
+
+    bool get_lines(std::vector<bool> &cols, std::vector<bool> &rows) const override;
+
+private:
+    /// @brief Implementation of `set_windows`
+    /// @param windows A vector of windows to set
+    /// @return true on success
+    /// @throw an exception if the size of the vector is higher than the maximum supported number
+    ///        of windows (see @ref get_max_supported_windows_count)
+    bool set_windows_impl(const std::vector<Window> &windows);
+
+    bool enabled_;
+    std::shared_ptr<V4L2Controls> controls_;
+};
+
+} // namespace Metavision
+
+#endif // METAVISION_HAL_V4L2_ROI_INTERFACE_H
diff --git a/hal_psee_plugins/src/devices/v4l2/CMakeLists.txt b/hal_psee_plugins/src/devices/v4l2/CMakeLists.txt
index 7ab690b58d..b3073a418b 100644
--- a/hal_psee_plugins/src/devices/v4l2/CMakeLists.txt
+++ b/hal_psee_plugins/src/devices/v4l2/CMakeLists.txt
@@ -13,4 +13,7 @@ endif()
  
 target_sources(metavision_psee_hw_layer_obj PRIVATE
     ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_device_builder.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_ll_biases.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_erc.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_roi_interface.cpp
 )
diff --git a/hal_psee_plugins/src/devices/v4l2/v4l2_erc.cpp b/hal_psee_plugins/src/devices/v4l2/v4l2_erc.cpp
new file mode 100644
index 0000000000..43c645a69c
--- /dev/null
+++ b/hal_psee_plugins/src/devices/v4l2/v4l2_erc.cpp
@@ -0,0 +1,85 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#include <fstream>
+#include <sstream>
+#include <iomanip>
+#include <cstdint>
+
+#include "metavision/psee_hw_layer/devices/v4l2/v4l2_erc.h"
+#include "metavision/psee_hw_layer/boards/v4l2/v4l2_controls.h"
+#include "metavision/hal/utils/hal_log.h"
+#include "metavision/hal/utils/hal_exception.h"
+
+namespace Metavision {
+
+V4L2Erc::V4L2Erc(std::shared_ptr<V4L2Controls> controls) : controls_(controls) {
+    // reset all erc controls to default values.
+    controls_->foreach ([&](V4L2Controls::V4L2Control &ctrl) {
+        auto name = std::string(ctrl.query_.name);
+        // skip non erc controls
+        if (name.find("erc_") != 0) {
+            return 0;
+        }
+        ctrl.reset();
+        return 0;
+    });
+}
+
+bool V4L2Erc::enable(bool en) {
+    auto ctrl = controls_->get("erc_enable");
+    int ret;
+
+    ret = ctrl.set_bool(en);
+    if (ret != 0) {
+        MV_HAL_LOG_ERROR() << "Failed to set erc_enable Control value to" << en;
+        return false;
+    }
+    MV_HAL_LOG_INFO() << "Set erc_enable Control value to" << en;
+
+    return true;
+}
+
+bool V4L2Erc::is_enabled() const {
+    auto ctrl = controls_->get("erc_enable");
+    return *ctrl.get_bool() == 1;
+}
+
+void V4L2Erc::erc_from_file(const std::string &file_path) {
+    throw std::runtime_error("ERC configuration from file not implemented");
+}
+
+uint32_t V4L2Erc::get_count_period() const {
+    return 1000000;
+}
+
+bool V4L2Erc::set_cd_event_count(uint32_t count) {
+    auto ctrl = controls_->get("erc_rate");
+    MV_HAL_LOG_INFO() << "Set erc_rate Control value to" << count;
+    return ctrl.set_int64(count) == 0;
+}
+
+uint32_t V4L2Erc::get_min_supported_cd_event_count() const {
+    auto ctrl = controls_->get("erc_rate");
+    return (uint32_t)*ctrl.get_min<int64_t>();
+}
+
+uint32_t V4L2Erc::get_max_supported_cd_event_count() const {
+    auto ctrl = controls_->get("erc_rate");
+    return (uint32_t)*ctrl.get_max<int64_t>();
+}
+
+uint32_t V4L2Erc::get_cd_event_count() const {
+    auto ctrl = controls_->get("erc_rate");
+    return *ctrl.get_int64();
+}
+
+} // namespace Metavision
diff --git a/hal_psee_plugins/src/devices/v4l2/v4l2_ll_biases.cpp b/hal_psee_plugins/src/devices/v4l2/v4l2_ll_biases.cpp
new file mode 100644
index 0000000000..94d4ad7890
--- /dev/null
+++ b/hal_psee_plugins/src/devices/v4l2/v4l2_ll_biases.cpp
@@ -0,0 +1,83 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#include <cassert>
+#include "metavision/hal/utils/detail/hal_log_impl.h"
+#include "metavision/psee_hw_layer/devices/v4l2/v4l2_ll_biases.h"
+#include "metavision/psee_hw_layer/boards/v4l2/v4l2_controls.h"
+
+namespace Metavision {
+
+V4L2LLBiases::V4L2LLBiases(const DeviceConfig &device_config, std::shared_ptr<V4L2Controls> controls) :
+    I_LL_Biases(device_config), controls_(controls) {
+    // reset all biases to default values
+    controls_->foreach ([&](V4L2Controls::V4L2Control &ctrl) {
+        auto name = std::string(ctrl.query_.name);
+        // skip non bias controls
+        if (name.find("bias_") != 0) {
+            return 0;
+        }
+
+        ctrl.reset();
+        return 0;
+    });
+}
+
+bool V4L2LLBiases::set_impl(const std::string &bias_name, int bias_value) {
+    auto ctrl = controls_->get(bias_name);
+    int ret;
+
+    ret = ctrl.set_int(bias_value);
+    if (ret != 0) {
+        MV_HAL_LOG_ERROR() << "Failed to set" << bias_name << "Control value to" << bias_value;
+        return false;
+    }
+
+    MV_HAL_LOG_INFO() << "Success setting" << bias_name << "Control value to" << bias_value;
+    return true;
+}
+
+int V4L2LLBiases::get_impl(const std::string &bias_name) const {
+    auto ctrl      = controls_->get(bias_name);
+    auto maybe_val = ctrl.get_int();
+    if (!maybe_val.has_value())
+        throw std::runtime_error("could not get control value");
+
+    MV_HAL_LOG_INFO() << bias_name << "Control value:" << *maybe_val;
+    return *maybe_val;
+}
+
+bool V4L2LLBiases::get_bias_info_impl(const std::string &bias_name, LL_Bias_Info &bias_info) const {
+    auto ctrl = controls_->get(bias_name);
+    bias_info = LL_Bias_Info(0, 127, ctrl.query_.minimum, ctrl.query_.maximum, std::string("todo::description"), true,
+                             std::string("todo::category"));
+
+    return true;
+}
+
+std::map<std::string, int> V4L2LLBiases::get_all_biases() const {
+    std::map<std::string, int> biases;
+
+    controls_->foreach ([&biases](V4L2Controls::V4L2Control &ctrl) {
+        auto name = std::string(ctrl.query_.name);
+        // skip non bias controls
+        if (name.find("bias_") != 0) {
+            return 0;
+        }
+
+        biases[ctrl.query_.name] = ctrl.get_int().value_or(0xFFFFFFFF);
+        return 0;
+    });
+
+    return biases;
+}
+
+} // namespace Metavision
diff --git a/hal_psee_plugins/src/devices/v4l2/v4l2_roi_interface.cpp b/hal_psee_plugins/src/devices/v4l2/v4l2_roi_interface.cpp
new file mode 100644
index 0000000000..3b5765601a
--- /dev/null
+++ b/hal_psee_plugins/src/devices/v4l2/v4l2_roi_interface.cpp
@@ -0,0 +1,129 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#include "metavision/psee_hw_layer/devices/v4l2/v4l2_roi_interface.h"
+
+namespace Metavision {
+
+void raise_error(const std::string &str);
+
+V4L2RoiInterface::V4L2RoiInterface(std::shared_ptr<V4L2Controls> controls) : controls_(controls), enabled_(false) {
+    auto ctrl = controls_->get("roi_reset");
+    if (ctrl.push()) {
+        MV_HAL_LOG_ERROR() << "Failed to reset roi";
+    }
+}
+
+int V4L2RoiInterface::device_width() const {
+    return 320;
+}
+
+int V4L2RoiInterface::device_height() const {
+    return 320;
+}
+
+bool V4L2RoiInterface::enable(bool state) {
+    enabled_ = state;
+    return true;
+}
+
+bool V4L2RoiInterface::is_enabled() const {
+    return enabled_;
+}
+
+bool V4L2RoiInterface::set_mode(const Mode &mode) {
+    auto ctrl = controls_->get("roi_roni");
+    switch (mode) {
+    case I_ROI::Mode::ROI:
+        return ctrl.set_bool(false) < 0 ? false : true;
+    case I_ROI::Mode::RONI:
+        return ctrl.set_bool(true) < 0 ? false : true;
+    default:
+        return false;
+    }
+}
+
+I_ROI::Mode V4L2RoiInterface::get_mode() const {
+    auto ctrl    = controls_->get("roi_roni");
+    auto is_roni = ctrl.get_bool().value();
+    return is_roni ? I_ROI::Mode::RONI : I_ROI::Mode::ROI;
+}
+
+size_t V4L2RoiInterface::get_max_supported_windows_count() const {
+    // update roi_set to provide max number of windows
+    // for now supoprt both genx and imx with only 1 allowed window
+    return 18;
+}
+
+bool V4L2RoiInterface::set_lines(const std::vector<bool> &cols, const std::vector<bool> &rows) {
+    throw std::runtime_error("V4L2RoiInterface::set_lines() not implemented");
+}
+
+struct roi {
+    uint32_t x;
+    uint32_t y;
+    uint32_t width;
+    uint32_t height;
+};
+
+// TODO:
+// add size and use flexible array
+// struct roi_set {
+//    uint32_t n;       // number of set rois
+//    uint32_t size;     // number of possible rois
+//    struct roi rois[]; // flexible array of rois
+// }
+
+struct roi_set {
+    uint32_t n;
+    struct roi rois[18];
+};
+
+bool V4L2RoiInterface::set_windows_impl(const std::vector<Window> &windows) {
+    auto ctrl            = controls_->get("roi_set");
+    struct roi_set *rois = ctrl.get_compound<struct roi_set>().value();
+
+    if (windows.size() > get_max_supported_windows_count()) {
+        MV_HAL_LOG_ERROR() << "Too many windows";
+        return false;
+    }
+
+    rois->n = 0;
+    for (const auto &window : windows) {
+        if (window.width <= 0 || window.height <= 0) {
+            continue;
+        }
+
+        auto &roi  = rois->rois[rois->n++];
+        roi.x      = std::max(0, window.x);
+        roi.y      = std::max(0, window.y);
+        roi.width  = std::min(device_width() - roi.x, static_cast<uint32_t>(window.width));
+        roi.height = std::min(device_width() - roi.y, static_cast<uint32_t>(window.height));
+    }
+
+    if (ctrl.set_compound(rois)) {
+        MV_HAL_LOG_ERROR() << "Failed to set windows";
+        return false;
+    }
+
+    return true;
+}
+
+std::vector<I_ROI::Window> V4L2RoiInterface::get_windows() const {
+    return {};
+}
+
+bool V4L2RoiInterface::get_lines(std::vector<bool> &cols, std::vector<bool> &rows) const {
+    raise_error("V4L2RoiInterface::get_lines() not implemented");
+    return false;
+}
+
+} // namespace Metavision
-- 
2.39.5

