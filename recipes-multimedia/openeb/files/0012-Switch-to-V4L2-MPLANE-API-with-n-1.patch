From 6308a779e8bc87fbe0fe62ee805a819d0ba5bdbd Mon Sep 17 00:00:00 2001
From: Christian Dreher <cdreher@prophesee.ai>
Date: Thu, 6 Feb 2025 19:04:24 +0100
Subject: [PATCH 12/17] Switch to V4L2 MPLANE API (with n=1)

---
 .../include/boards/v4l2/v4l2_device.h         |  8 ++++----
 .../src/boards/v4l2/v4l2_data_transfer.cpp    | 19 ++++++++++++-------
 .../src/boards/v4l2/v4l2_device.cpp           |  6 +++---
 .../src/boards/v4l2/v4l2_dmabuf_allocator.cpp |  2 +-
 .../v4l2/v4l2_hardware_identification.cpp     |  4 ++--
 .../src/boards/v4l2/v4l2_mmap_allocator.cpp   |  7 +++++--
 6 files changed, 27 insertions(+), 19 deletions(-)

diff --git a/hal_psee_plugins/include/boards/v4l2/v4l2_device.h b/hal_psee_plugins/include/boards/v4l2/v4l2_device.h
index c4af02595e..059ae87b19 100644
--- a/hal_psee_plugins/include/boards/v4l2/v4l2_device.h
+++ b/hal_psee_plugins/include/boards/v4l2/v4l2_device.h
@@ -139,19 +139,19 @@ public:
     }
 
     int get_height() const {
-        struct v4l2_format fmt{.type = V4L2_BUF_TYPE_VIDEO_CAPTURE};
+        struct v4l2_format fmt{.type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE};
 
         if (ioctl(get_video_entity()->fd, VIDIOC_G_FMT, &fmt))
             raise_error("VIDIOC_G_FMT failed");
 
-        return fmt.fmt.pix.height;
+        return fmt.fmt.pix_mp.height;
     };
 
     int get_width() const {
-        struct v4l2_format fmt{.type = V4L2_BUF_TYPE_VIDEO_CAPTURE};
+        struct v4l2_format fmt{.type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE};
         if (ioctl(get_video_entity()->fd, VIDIOC_G_FMT, &fmt))
             raise_error("VIDIOC_G_FMT failed");
-        return fmt.fmt.pix.width;
+        return fmt.fmt.pix_mp.width;
     };
 
     int enumerate_entities();
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp
index 0b1482ae43..d4e48ffe7d 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp
@@ -61,7 +61,7 @@ V4l2DataTransfer::~V4l2DataTransfer() {
 V4l2RequestBuffers V4l2DataTransfer::request_buffers(uint32_t nb_buffers) {
     V4l2RequestBuffers req{0};
     req.count  = nb_buffers;
-    req.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    req.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
     req.memory = memtype_;
 
     if (-1 == ioctl(fd_, VIDIOC_REQBUFS, &req)) {
@@ -81,12 +81,14 @@ void V4l2DataTransfer::start_impl() {
     // Since 2 queued buffers are usually enough, and we have 32 of them, queuing 4 should avoid issues with hardware
     // expecting more, while allowing 28 buffers in parallel (or in a 28-stage pipeline) in the app.
     for (unsigned int i = 0; i < device_buffer_preload_number; ++i) {
+        struct v4l2_plane plane = {0};
         auto input_buff = pool_.acquire();
         // Using DMABUF, the allocator handles the pool of buffers through file descriptors, we need to choose a free
         // index to queue a buffer.
         // On the other hand, with MMAP, the pool is handled through indices, and fill_v4l2_buffer will fix the index
         // in the V4l2Buffer descriptor.
-        V4l2Buffer buffer = {.index = i, .type = V4L2_BUF_TYPE_VIDEO_CAPTURE, .memory = memtype_};
+        V4l2Buffer buffer = {.index = i, .type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE, .memory = memtype_, .length = 1};
+        buffer.m.planes = &plane;
         fill_v4l2_buffer(input_buff, buffer);
 
         // Update buffer size to its capacity so that it may only be downsized after transfer
@@ -112,6 +114,7 @@ void V4l2DataTransfer::run_impl(const DataTransfer &data_transfer) {
 
     while (!data_transfer.should_stop()) {
         V4l2Buffer buf{0};
+        struct v4l2_plane plane;
 
         if (poll(fds, 1, -1) < 0) {
             MV_HAL_LOG_ERROR() << "V4l2DataTransfer: poll failed" << strerror(errno);
@@ -127,20 +130,22 @@ void V4l2DataTransfer::run_impl(const DataTransfer &data_transfer) {
             break;
         }
 
-        buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
         buf.memory = memtype_;
+        buf.length = 1;
+        buf.m.planes = &plane;
         if (ioctl(fd_, VIDIOC_DQBUF, &buf) < 0) {
             MV_HAL_LOG_ERROR() << "V4l2DataTransfer: DQBUF failed" << strerror(errno);
             break;
         }
 
-        MV_HAL_LOG_DEBUG() << "Grabbed buffer" << buf.index << "of:" << buf.bytesused << "Bytes.";
+        MV_HAL_LOG_DEBUG() << "Grabbed buffer" << buf.index << "of:" << buf.m.planes[0].bytesused << "Bytes.";
 
         // Advertise CPU operations to allow cache maintenance
         begin_cpu_access(queued_buffers_[buf.index]);
 
         // Get the vector corresponding to this buffer and transfer the data
-        queued_buffers_[buf.index]->resize(buf.bytesused);
+        queued_buffers_[buf.index]->resize(buf.m.planes[0].bytesused);
 
         // Transfer the data for processing
         // if there is no more available buffer and buffer drop is allowed,
@@ -222,7 +227,7 @@ void V4l2DataTransfer::end_cpu_access(BufferPtr &buf) const {
 
 V4l2DataTransfer::V4l2Allocator::V4l2Allocator(int videodev_fd) {
     struct v4l2_format format {
-        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE
+        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE
     };
 
     // Technically, the format is not locked yet, it will be locked when V4l2DataTransfer constructor does
@@ -230,7 +235,7 @@ V4l2DataTransfer::V4l2Allocator::V4l2Allocator(int videodev_fd) {
     if (ioctl(videodev_fd, VIDIOC_G_FMT, &format))
         throw std::system_error(errno, std::generic_category(), "VIDIOC_G_FMT failed");
 
-    buffer_byte_size_ = format.fmt.pix.sizeimage;
+    buffer_byte_size_ = format.fmt.pix_mp.plane_fmt[0].sizeimage;
 }
 
 } // namespace Metavision
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp
index 3311e3e647..49117a7f91 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp
@@ -59,7 +59,7 @@ V4L2DeviceControl::V4L2DeviceControl(const std::string &devpath) {
         }
     }
 
-    if (!(cap_.capabilities & V4L2_CAP_VIDEO_CAPTURE))
+    if (!(cap_.capabilities & V4L2_CAP_VIDEO_CAPTURE_MPLANE))
         throw std::runtime_error(devpath + " is not video capture device");
 
     if (!(cap_.capabilities & V4L2_CAP_STREAMING))
@@ -80,12 +80,12 @@ V4l2Capability V4L2DeviceControl::get_capability() const {
 }
 
 void V4L2DeviceControl::start() {
-    enum v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    enum v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
     if (ioctl(get_video_entity()->fd, VIDIOC_STREAMON, &type))
         raise_error("VIDIOC_STREAMON failed");
 }
 void V4L2DeviceControl::stop() {
-    enum v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    enum v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
     if (ioctl(get_video_entity()->fd, VIDIOC_STREAMOFF, &type))
         raise_error("VIDIOC_STREAMOFF failed");
 }
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_dmabuf_allocator.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_dmabuf_allocator.cpp
index efc43c2d2b..03929283f5 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_dmabuf_allocator.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_dmabuf_allocator.cpp
@@ -59,7 +59,7 @@ bool V4l2DataTransfer::DmabufAllocator::do_is_equal(const std::pmr::memory_resou
 }
 
 void V4l2DataTransfer::DmabufAllocator::fill_v4l2_buffer(void *vaddr, V4l2Buffer &buf) const {
-    buf.m.fd = fd(vaddr);
+    buf.m.planes[0].m.fd = fd(vaddr);
 }
 
 void V4l2DataTransfer::DmabufAllocator::begin_cpu_access(void *vaddr) const {
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
index b9a8aebf15..b06e95ec05 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_hardware_identification.cpp
@@ -37,7 +37,7 @@ std::vector<std::string> V4l2HwIdentification::get_available_data_encoding_forma
 
 std::string V4l2HwIdentification::get_current_data_encoding_format() const {
     struct v4l2_format fmt {
-        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE
+        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE
     };
     struct v4l2_subdev_selection crop_bound {
         .which = V4L2_SUBDEV_FORMAT_ACTIVE,
@@ -51,7 +51,7 @@ std::string V4l2HwIdentification::get_current_data_encoding_format() const {
     if (ioctl(ctrl_->get_sensor_entity()->fd, VIDIOC_SUBDEV_G_SELECTION, &crop_bound))
         raise_error("VIDIOC_SUBDEV_G_SELECTION failed");
 
-    switch (fmt.fmt.pix.pixelformat) {
+    switch (fmt.fmt.pix_mp.pixelformat) {
     case v4l2_fourcc('P', 'S', 'E', 'E'): {
         StreamFormat format("EVT2");
         format["width"]                    = std::to_string(crop_bound.r.width);
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp
index 6fdde35085..55436071b6 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp
@@ -44,15 +44,18 @@ void *V4l2DataTransfer::V4l2MmapAllocator::do_allocate(std::size_t bytes, std::s
 
     // Query buffer information
     V4l2Buffer buffer{};
-    buffer.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    struct v4l2_plane plane;
+    buffer.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
     buffer.memory = V4L2_MEMORY_MMAP;
     buffer.index  = buffer_index;
+    buffer.length = 1;
+    buffer.m.planes = &plane;
 
     if (ioctl(fd_, VIDIOC_QUERYBUF, &buffer) < 0)
         throw std::system_error(errno, std::generic_category(), "Could not query V4L2 buffer");
 
     // Map it in the program memory
-    vaddr = mmap(NULL, buffer.length, PROT_READ | PROT_WRITE, MAP_SHARED, fd_, buffer.m.offset);
+    vaddr = mmap(NULL, buffer.m.planes[0].length, PROT_READ | PROT_WRITE, MAP_SHARED, fd_, buffer.m.planes[0].m.mem_offset);
     if (vaddr == MAP_FAILED)
         throw std::system_error(errno, std::generic_category(), "Could not mmap V4L2 buffer");
 
-- 
2.39.5

